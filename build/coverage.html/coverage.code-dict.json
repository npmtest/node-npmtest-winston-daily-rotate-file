{"/home/travis/build/npmtest/node-npmtest-winston-daily-rotate-file/test.js":"/* istanbul instrument in package npmtest_winston_daily_rotate_file */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-winston-daily-rotate-file/lib.npmtest_winston_daily_rotate_file.js":"/* istanbul instrument in package npmtest_winston_daily_rotate_file */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_winston_daily_rotate_file = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_winston_daily_rotate_file = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-winston-daily-rotate-file/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-winston-daily-rotate-file && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_winston_daily_rotate_file */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_winston_daily_rotate_file\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_winston_daily_rotate_file.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_winston_daily_rotate_file.rollup.js'] =\n            local.assetsDict['/assets.npmtest_winston_daily_rotate_file.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_winston_daily_rotate_file.__dirname + '/lib.npmtest_winston_daily_rotate_file.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-winston-daily-rotate-file/node_modules/winston-daily-rotate-file/index.js":"'use strict';\n\nvar fs = require('fs');\nvar path = require('path');\nvar util = require('util');\nvar common = require('winston/lib/winston/common');\nvar Transport = require('winston').Transport;\nvar Stream = require('stream').Stream;\nvar os = require('os');\nvar winston = require('winston');\nvar zlib = require('zlib');\n\nvar weekday = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n\n//\n// ### function DailyRotateFile (options)\n// #### @options {Object} Options for this instance.\n// Constructor function for the DailyRotateFile transport object responsible\n// for persisting log messages and metadata to one or more files.\n//\nvar DailyRotateFile = module.exports = function (options) {\n  Transport.call(this, options);\n\n  //\n  // Helper function which throws an `Error` in the event\n  // that any of the rest of the arguments is present in `options`.\n  //\n  function throwIf(target /* , illegal... */) {\n    Array.prototype.slice.call(arguments, 1).forEach(function (name) {\n      if (options[name]) {\n        throw new Error('Cannot set ' + name + ' and ' + target + 'together');\n      }\n    });\n  }\n\n  if (options.filename || options.dirname) {\n    throwIf('filename or dirname', 'stream');\n    this._basename = this.filename = options.filename ?\n      path.basename(options.filename) :\n      'winston.log';\n\n    this.dirname = options.dirname || path.dirname(options.filename);\n    this.options = options.options || {flags: 'a'};\n\n    //\n    // \"24 bytes\" is maybe a good value for logging lines.\n    //\n    this.options.highWaterMark = this.options.highWaterMark || 24;\n  } else if (options.stream) {\n    throwIf('stream', 'filename', 'maxsize');\n    this._stream = options.stream;\n    var self = this;\n    this._stream.on('error', function (error) {\n      self.emit('error', error);\n    });\n\n    //\n    // We need to listen for drain events when\n    // write() returns false. This can make node\n    // mad at times.\n    //\n    this._stream.setMaxListeners(Infinity);\n  } else {\n    throw new Error('Cannot log to file without filename or stream.');\n  }\n\n  this.json = options.json !== false;\n  this.colorize = options.colorize || false;\n  this.maxsize = options.maxsize || null;\n  this.logstash = options.logstash || null;\n  this.maxFiles = options.maxFiles || null;\n  this.label = options.label || null;\n  this.prettyPrint = options.prettyPrint || false;\n  this.showLevel = options.showLevel === undefined ? true : options.showLevel;\n  this.timestamp = options.timestamp === undefined ? true : options.timestamp;\n  this.datePattern = options.datePattern ? options.datePattern : '.yyyy-MM-dd';\n  this.depth = options.depth || null;\n  this.eol = options.eol || os.EOL;\n  this.maxRetries = options.maxRetries || 2;\n  this.prepend = options.prepend || false;\n  this.localTime = options.localTime || false;\n  this.zippedArchive = options.zippedArchive || false;\n\n  if (this.json) {\n    this.stringify = options.stringify;\n  }\n\n  //\n  // Internal state variables representing the number\n  // of files this instance has created and the current\n  // size (in bytes) of the current logfile.\n  //\n  this._size = 0;\n  this._created = 0;\n  this._buffer = [];\n  this._draining = false;\n  this._failures = 0;\n  this._archive = false;\n\n  // Internal variable which will hold a record of all files\n  // belonging to this transport which are currently in the\n  // log directory in chronological order.\n  //\n  this._currentFiles = function () {\n    //\n    // Only proceed if maxsize is not configured for this transport.\n    if (!this.maxsize) {\n      try {\n        return fs.readdirSync(this.dirname).filter(function (file) {\n          return file.includes(this._basename);\n        }.bind(this)).map(function (file) {\n          return {\n            name: file,\n            time: fs.statSync(path.join(this.dirname, file)).mtime.getTime()\n          };\n        }.bind(this)).sort(function (a, b) {\n          return a.time - b.time;\n        }).map(function (v) {\n          return v.name;\n        });\n      } catch (e) {\n        // directory doesnt exist so there are no files. Do nothing.\n      }\n    }\n    return [];\n  }.bind(this)();\n\n  this._year = this._getTime('year');\n  this._month = this._getTime('month');\n  this._date = this._getTime('date');\n  this._hour = this._getTime('hour');\n  this._minute = this._getTime('minute');\n  this._weekday = weekday[this._getTime('day')];\n  var token = /d{1,4}|m{1,4}|yy(?:yy)?|([HhM])\\1?/g;\n  var pad = function (val, len) {\n    val = String(val);\n    len = len || 2;\n    while (val.length < len) {\n      val = '0' + val;\n    }\n    return val;\n  };\n\n  this.getFormattedDate = function () {\n    // update the year, month, date... variables\n    this._year = this._getTime('year');\n    this._month = this._getTime('month');\n    this._date = this._getTime('date');\n    this._hour = this._getTime('hour');\n    this._minute = this._getTime('minute');\n    this._weekday = weekday[this._getTime('day')];\n\n    var flags = {\n      yy: String(this._year).slice(2),\n      yyyy: this._year,\n      M: this._month + 1,\n      MM: pad(this._month + 1),\n      d: this._date,\n      dd: pad(this._date),\n      H: this._hour,\n      HH: pad(this._hour),\n      m: this._minute,\n      mm: pad(this._minute),\n      ddd: this._weekday\n    };\n    return this.datePattern.replace(token, function ($0) {\n      return $0 in flags ? flags[$0] : $0.slice(1, $0.length - 1);\n    });\n  };\n};\n\n//\n// Inherit from `winston.Transport`.\n//\nutil.inherits(DailyRotateFile, Transport);\n\n/**\n * Define a getter so that `winston.transports.DailyRotateFile`\n * is available and thus backwards compatible.\n */\nwinston.transports.DailyRotateFile = DailyRotateFile;\n\n//\n// Expose the name of this Transport on the prototype\n//\nDailyRotateFile.prototype.name = 'dailyRotateFile';\n\n//\n// ### function log (level, msg, [meta], callback)\n// #### @level {string} Level at which to log the message.\n// #### @msg {string} Message to log\n// #### @meta {Object} **Optional** Additional metadata to attach\n// #### @callback {function} Continuation to respond to when complete.\n// Core logging method exposed to Winston. Metadata is optional.\n//\nDailyRotateFile.prototype.log = function (level, msg, meta, callback) {\n  if (this.silent) {\n    return callback(null, true);\n  }\n\n  //\n  // If failures exceeds maxRetries then we can't access the\n  // stream. In this case we need to perform a noop and return\n  // an error.\n  //\n  if (this._failures >= this.maxRetries) {\n    return callback(new Error('Transport is in a failed state.'));\n  }\n\n  var self = this;\n\n  var output = common.log({\n    level: level,\n    message: msg,\n    meta: meta,\n    json: this.json,\n    colorize: this.colorize,\n    logstash: this.logstash,\n    prettyPrint: this.prettyPrint,\n    timestamp: this.timestamp,\n    label: this.label,\n    stringify: this.stringify,\n    showLevel: this.showLevel,\n    depth: this.depth,\n    formatter: this.formatter,\n    humanReadableUnhandledException: this.humanReadableUnhandledException\n  }) + this.eol;\n\n  this._size += output.length;\n\n  if (this.filename) {\n    this.open(function (err) {\n      if (err) {\n        //\n        // If there was an error enqueue the message\n        //\n        return self._buffer.push([output, callback]);\n      }\n\n      self._write(output, callback);\n      self._lazyDrain();\n    });\n  } else {\n    //\n    // If there is no `filename` on this instance then it was configured\n    // with a raw `WriteableStream` instance and we should not perform any\n    // size restrictions.\n    //\n    this._write(output, callback);\n    this._lazyDrain();\n  }\n};\n\n//\n// ### function _write (data, cb)\n// #### @data {String|Buffer} Data to write to the instance's stream.\n// #### @cb {function} Continuation to respond to when complete.\n// Write to the stream, ensure execution of a callback on completion.\n//\nDailyRotateFile.prototype._write = function (data, callback) {\n  // If this is a file write stream, we could use the builtin\n  // callback functionality, however, the stream is not guaranteed\n  // to be an fs.WriteStream.\n  var ret = this._stream.write(data);\n  if (!callback) {\n    return;\n  }\n\n  if (ret === false) {\n    return this._stream.once('drain', function () {\n      callback(null, true);\n    });\n  }\n  callback(null, true);\n};\n\n//\n// ### function query (options, callback)\n// #### @options {Object} Loggly-like query options for this instance.\n// #### @callback {function} Continuation to respond to when complete.\n// Query the transport. Options object is optional.\n//\nDailyRotateFile.prototype.query = function (options, callback) {\n  if (typeof options === 'function') {\n    callback = options;\n    options = {};\n  }\n\n  // TODO when maxfilesize rotate occurs\n  var file = path.join(this.dirname, this._getFilename());\n  options = this.normalizeQuery(options);\n  var buff = '';\n  var results = [];\n  var row = 0;\n\n  var stream = fs.createReadStream(file, {\n    encoding: 'utf8'\n  });\n\n  stream.on('error', function (err) {\n    if (stream.readable) {\n      stream.destroy();\n    }\n    if (!callback) {\n      return;\n    }\n    return err.code === 'ENOENT' ? callback(null, results) : callback(err);\n  });\n\n  stream.on('data', function (data) {\n    data = (buff + data).split(/\\n+/);\n    var l = data.length - 1;\n    var i = 0;\n\n    for (; i < l; i++) {\n      if (!options.start || row >= options.start) {\n        add(data[i]);\n      }\n      row++;\n    }\n\n    buff = data[l];\n  });\n\n  stream.on('close', function () {\n    if (buff) {\n      add(buff, true);\n    }\n    if (options.order === 'desc') {\n      results = results.reverse();\n    }\n    if (callback) {\n      callback(null, results);\n    }\n  });\n\n  function add(buff, attempt) {\n    try {\n      var log = JSON.parse(buff);\n      if (check(log)) {\n        push(log);\n      }\n    } catch (e) {\n      if (!attempt) {\n        stream.emit('error', e);\n      }\n    }\n  }\n\n  function push(log) {\n    if (options.rows && results.length >= options.rows) {\n      if (stream.readable) {\n        stream.destroy();\n      }\n      return;\n    }\n\n    if (options.fields) {\n      var obj = {};\n      options.fields.forEach(function (key) {\n        obj[key] = log[key];\n      });\n      log = obj;\n    }\n\n    results.push(log);\n  }\n\n  function check(log) {\n    if (!log) {\n      return;\n    }\n\n    if (typeof log !== 'object') {\n      return;\n    }\n\n    var time = new Date(log.timestamp);\n    if ((options.from && time < options.from) ||\n      (options.until && time > options.until)) {\n      return;\n    }\n\n    return true;\n  }\n};\n\n//\n// ### function stream (options)\n// #### @options {Object} Stream options for this instance.\n// Returns a log stream for this transport. Options object is optional.\n//\nDailyRotateFile.prototype.stream = function (options) {\n  var file = path.join(this.dirname, this._getFilename());\n  options = options || {};\n  var stream = new Stream();\n\n  var tail = {\n    file: file,\n    start: options.start\n  };\n\n  stream.destroy = common.tailFile(tail, function (err, line) {\n    if (err) {\n      return stream.emit('error', err);\n    }\n\n    try {\n      stream.emit('data', line);\n      line = JSON.parse(line);\n      stream.emit('log', line);\n    } catch (e) {\n      stream.emit('error', e);\n    }\n  });\n\n  if (stream.resume) {\n    stream.resume();\n  }\n\n  return stream;\n};\n\n//\n// ### function open (callback)\n// #### @callback {function} Continuation to respond to when complete\n// Checks to see if a new file needs to be created based on the `maxsize`\n// (if any) and the current size of the file used.\n//\nDailyRotateFile.prototype.open = function (callback) {\n  if (this.opening) {\n    //\n    // If we are already attempting to open the next\n    // available file then respond with a value indicating\n    // that the message should be buffered.\n    //\n    return callback(true);\n  } else if (!this._stream || (this.maxsize && this._size >= this.maxsize) ||\n    this._filenameHasExpired()) {\n    //\n    // If we dont have a stream or have exceeded our size, then create\n    // the next stream and respond with a value indicating that\n    // the message should be buffered.\n    //\n    callback(true);\n    return this._createStream();\n  }\n\n  //\n  // Otherwise we have a valid (and ready) stream.\n  //\n  callback();\n};\n\n//\n// ### function close ()\n// Closes the stream associated with this instance.\n//\nDailyRotateFile.prototype.close = function () {\n  var self = this;\n\n  if (this._stream) {\n    this._stream.end();\n    this._stream.destroySoon();\n\n    this._stream.once('drain', function () {\n      self.emit('flush');\n      self.emit('closed');\n    });\n  }\n};\n\n//\n// ### function flush ()\n// Flushes any buffered messages to the current `stream`\n// used by this instance.\n//\nDailyRotateFile.prototype.flush = function () {\n  var self = this;\n\n  //\n  // Iterate over the `_buffer` of enqueued messaged\n  // and then write them to the newly created stream.\n  //\n  this._buffer.forEach(function (item) {\n    var str = item[0];\n    var callback = item[1];\n\n    process.nextTick(function () {\n      self._write(str, callback);\n      self._size += str.length;\n    });\n  });\n\n  //\n  // Quickly truncate the `_buffer` once the write operations\n  // have been started\n  //\n  self._buffer.length = 0;\n\n  //\n  // When the stream has drained we have flushed\n  // our buffer.\n  //\n  self._stream.once('drain', function () {\n    self.emit('flush');\n    self.emit('logged');\n  });\n};\n\n//\n// ### @private function _createStream ()\n// Attempts to open the next appropriate file for this instance\n// based on the common state (such as `maxsize` and `_basename`).\n//\nDailyRotateFile.prototype._createStream = function () {\n  var self = this;\n  this.opening = true;\n\n  (function checkFile(target) {\n    var fullname = path.join(self.dirname, target);\n    //\n    // Creates the `WriteStream` and then flushes any\n    // buffered messages.\n    //\n    function createAndFlush(size) {\n      if (self._stream) {\n        self._archive = self.zippedArchive ? self._stream.path : false;\n\n        self._stream.end();\n        self._stream.destroySoon();\n      }\n\n      self._size = size;\n      self.filename = target;\n      self._stream = fs.createWriteStream(fullname, self.options);\n      self._stream.on('error', function (error) {\n        if (self._failures < self.maxRetries) {\n          self._createStream();\n          self._failures++;\n        } else {\n          self.emit('error', error);\n        }\n      });\n\n      //\n      // We need to listen for drain events when\n      // write() returns false. This can make node\n      // mad at times.\n      //\n      self._stream.setMaxListeners(Infinity);\n\n      //\n      // When the current stream has finished flushing\n      // then we can be sure we have finished opening\n      // and thus can emit the `open` event.\n      //\n      self.once('flush', function () {\n        // Because \"flush\" event is based on native stream \"drain\" event,\n        // logs could be written inbetween \"self.flush()\" and here\n        // Therefore, we need to flush again to make sure everything is flushed\n        self.flush();\n\n        self.opening = false;\n        self.emit('open', fullname);\n      });\n\n      //\n      // Remark: It is possible that in the time it has taken to find the\n      // next logfile to be written more data than `maxsize` has been buffered,\n      // but for sensible limits (10s - 100s of MB) this seems unlikely in less\n      // than one second.\n      //\n      self.flush();\n      compressFile();\n    }\n\n    function compressFile() {\n      var logfile = self._archive;\n      self._archive = false;\n      if (logfile && fs.existsSync(String(logfile))) {\n        var gzip = zlib.createGzip();\n\n        var inp = fs.createReadStream(String(logfile));\n        var out = fs.createWriteStream(logfile + '.gz');\n\n        inp.pipe(gzip).pipe(out);\n        fs.unlinkSync(String(logfile));\n      }\n    }\n\n    fs.stat(fullname, function (err, stats) {\n      if (err) {\n        if (err.code !== 'ENOENT') {\n          return self.emit('error', err);\n        }\n\n        return createAndFlush(0);\n      }\n\n      if (!stats || (self.maxsize && stats.size >= self.maxsize)) {\n        //\n        // If `stats.size` is greater than the `maxsize` for\n        // this instance then try again\n        //\n        return checkFile(self._getFile(true));\n      }\n\n      if (self._filenameHasExpired()) {\n        self._year = self._getTime('year');\n        self._month = self._getTime('month');\n        self._date = self._getTime('date');\n        self._hour = self._getTime('hour');\n        self._minute = self._getTime('minute');\n        self._weekday = weekday[self._getTime('day')];\n        self._created = 0;\n        return checkFile(self._getFile());\n      }\n\n      createAndFlush(stats.size);\n    });\n  })(this._getFile());\n};\n\n//\n// ### @private function _getFile ()\n// Gets the next filename to use for this instance\n// in the case that log filesizes are being capped.\n//\nDailyRotateFile.prototype._getFile = function (inc) {\n  var filename = this._getFilename();\n  var remaining;\n\n  if (inc) {\n    //\n    // Increment the number of files created or\n    // checked by this instance.\n    //\n    // Check for maxFiles option and delete file\n    if (this.maxFiles && (this._created >= (this.maxFiles - 1))) {\n      remaining = this._created - (this.maxFiles - 1);\n      if (remaining === 0) {\n        try {\n          fs.unlinkSync(path.join(this.dirname, filename));\n        } catch (e) {}\n      } else {\n        try {\n          fs.unlinkSync(path.join(this.dirname, filename + '.' + remaining));\n        } catch (e) {}\n      }\n    }\n\n    this._created += 1;\n  } else if (!this.maxsize) {\n    //\n    // If the filename does not exist in the _currentFiles array then add it.\n    if (this._currentFiles.indexOf(filename) === -1) {\n      this._currentFiles.push(filename);\n    }\n\n    // While the _currentFiles array contains more file names than is configured\n    // in maxFiles loop the _currentFiles array and delete the file found at el\n    // 0.\n    while (this.maxFiles && (this._currentFiles.length > this.maxFiles)) {\n      try {\n        fs.unlinkSync(path.join(this.dirname, this._currentFiles[0]));\n      } catch (e) {\n        // File isn't accessible, do nothing.\n      }\n\n      // Remove the filename that was just deleted from the _currentFiles array.\n      this._currentFiles = this._currentFiles.slice(1);\n    }\n  }\n\n  return this._created ? filename + '.' + this._created : filename;\n};\n\n//\n// ### @private function _getFilename ()\n// Returns the log filename depending on `this.prepend` option value\n//\nDailyRotateFile.prototype._getFilename = function () {\n  var formattedDate = this.getFormattedDate();\n\n  if (this.prepend) {\n    if (this.datePattern === '.yyyy-MM-dd') {\n      this.datePattern = 'yyyy-MM-dd.';\n      formattedDate = this.getFormattedDate();\n    }\n\n    return formattedDate + this._basename;\n  }\n\n  return this._basename + formattedDate;\n};\n\n//\n// ### @private function _lazyDrain ()\n// Lazily attempts to emit the `logged` event when `this.stream` has\n// drained. This is really just a simple mutex that only works because\n// Node.js is single-threaded.\n//\nDailyRotateFile.prototype._lazyDrain = function () {\n  var self = this;\n\n  if (!this._draining && this._stream) {\n    this._draining = true;\n\n    this._stream.once('drain', function () {\n      this._draining = false;\n      self.emit('logged');\n    });\n  }\n};\n\n//\n// ### @private function _filenameHasExpired ()\n// Checks whether the current log file is valid\n// based on given datepattern\n//\nDailyRotateFile.prototype._filenameHasExpired = function () {\n  // searching for m is enough to say minute in date pattern\n  if (this.datePattern.match(/m/)) {\n    return (this._year < this._getTime('year') || this._month < this._getTime('month') || this._date < this._getTime('date') || this._hour < this._getTime('hour') || this._minute < this._getTime('minute'));\n  } else if (this.datePattern.match(/H/)) {\n    return (this._year < this._getTime('year') || this._month < this._getTime('month') || this._date < this._getTime('date') || this._hour < this._getTime('hour'));\n  } else if (this.datePattern.match(/d/)) {\n    return (this._year < this._getTime('year') || this._month < this._getTime('month') || this._date < this._getTime('date'));\n  } else if (this.datePattern.match(/M/)) {\n    return (this._year < this._getTime('year') || this._month < this._getTime('month'));\n  } else if (this.datePattern.match(/yy/)) {\n    return (this._year < this._getTime('year'));\n  }\n  return false;\n};\n\n//\n// ### @private function _getTime ()\n// Get current date/time\n// based on localTime config\n//\nDailyRotateFile.prototype._getTime = function (timeType) {\n  var now = new Date();\n\n  if (this.localTime) {\n    if (timeType === 'year') {\n      return now.getFullYear();\n    } else if (timeType === 'month') {\n      return now.getMonth();\n    } else if (timeType === 'date') {\n      return now.getDate();\n    } else if (timeType === 'hour') {\n      return now.getHours();\n    } else if (timeType === 'minute') {\n      return now.getMinutes();\n    } else if (timeType === 'day') {\n      return now.getDay();\n    }\n  }\n  if (timeType === 'year') {\n    return now.getUTCFullYear();\n  } else if (timeType === 'month') {\n    return now.getUTCMonth();\n  } else if (timeType === 'date') {\n    return now.getUTCDate();\n  } else if (timeType === 'hour') {\n    return now.getUTCHours();\n  } else if (timeType === 'minute') {\n    return now.getUTCMinutes();\n  } else if (timeType === 'day') {\n    return now.getUTCDay();\n  }\n};\n"}